// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
	previewFeatures = ["driverAdapters"]
}

datasource db {
	provider = "sqlite"
	url = env("DATABASE_URL")
}

model User {
	uuid       String    @id @unique @default(uuid())
	discordId  String    @map("discord_id") @unique
	createdAt  DateTime  @map("created_at") @default(now())

	profile  Profile?
	catcha   Catcha?
	nursery  Nursery?

	history  HistoryCat[]

	@@map("users")
}

model Profile {
	userUuid  String  @map("user_uuid") @unique @id

	name       String?
	pronouns   String?
	birthday   String?

	group  String?
	rank   String?

	user  User  @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

	@@map("profiles")
}

model Catcha {
	userUuid  String  @map("user_uuid") @unique @id

	lastRollPeriod   Int?       @map("last_roll_period")
	lastRollCount    Int?       @map("last_roll_count")
	lastClaim        DateTime?  @map("last_claim")

	lastTradedAt        DateTime?  @map("last_traded_at")
	tradeBlocked        Boolean?   @map("trade_blocked")
	tradeBlockedUntil   DateTime?  @map("trade_blocked_until")
	tradeBlockedReason  String?    @map("trade_blocked_reason")

	lastBirthdayCardClaimed  Int?  @map("last_birthday_card_claimed")

	rollCache  String?  @map("roll_cache")

	cards              CatchaCard[]
	cardHistoryEvents  CatchaCardHistoryEvent[]

	sentTrades      CatchaTrade[]  @relation("catcha_sent_trades")
	receivedTrades  CatchaTrade[]  @relation("catcha_received_trades")

	user  User  @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

	@@map("catchas")
}

model CatchaCard {
	uuid     String  @id @unique @default(uuid())
	cardId   Int     @map("card_id")

	ownerUuid  String  @map("owner_uuid")

	obtainedAt    DateTime  @map("obtained_at")
	obtainedFrom  String    @map("obtained_from")

	isInverted  Boolean  @map("is_inverted")
	variant     String?

	burned  Boolean?
	tags    String?

	untradeable  Boolean?

	pendingTradeUuid1  String?       @map("pending_trade_uuid_1")
	pendingTradeSide1  CatchaTrade?  @relation("catcha_sender_cards", fields: [pendingTradeUuid1], references: [tradeUuid], onDelete: SetNull)

	pendingTradeUuid2  String?       @map("pending_trade_uuid_2")
	pendingTradeSide2  CatchaTrade?  @relation("catcha_recipient_cards", fields: [pendingTradeUuid2], references: [tradeUuid], onDelete: SetNull)

    historyEvents  CatchaCardHistoryEvent[]

	catcha  Catcha  @relation(fields: [ownerUuid], references: [userUuid], onDelete: Cascade)

	@@map("catcha_cards")
	@@index(fields: [ownerUuid, cardId])
}

model CatchaCardHistoryEvent {
	cardUuid   String    @map("card_uuid")
	timestamp  DateTime

	event         String
	eventDetails  String?  @map("event_details")

	userUuid       String?  @map("user_uuid")

	card     CatchaCard  @relation(fields: [cardUuid], references: [uuid], onDelete: Cascade)
	catcha   Catcha?     @relation(fields: [userUuid], references: [userUuid], onDelete: SetNull)

	@@id([cardUuid, timestamp])
	@@index(fields: [cardUuid, event, eventDetails])
	@@map("catcha_card_history_events")
}

model CatchaTrade {
	tradeUuid  String   @id @unique @map("trade_uuid") @default(uuid())

	createdAt           DateTime   @map("created_at")
	updatedAt           DateTime   @map("updated_at")
	tradeCompleted      Boolean    @map("trade_completed")
	tradedCompletedAt   DateTime?  @map("trade_completed_at")

	senderUserUuid  String        @map("sender_user_uuid")
	sender          Catcha        @relation("catcha_sent_trades", fields: [senderUserUuid], references: [userUuid], onDelete: Cascade)
	senderCards     CatchaCard[]  @relation("catcha_sender_cards")
	senderKits      NurseryKit[]  @relation("trade_sender_kits")
	senderSideSent  Boolean       @map("sender_side_sent")
	senderAccepted  Boolean       @map("sender_accepted")

	recipientUserUuid  String        @map("recipient_user_uuid")
	recipient          Catcha        @relation("catcha_received_trades", fields: [recipientUserUuid], references: [userUuid], onDelete: Cascade)
	recipientCards     CatchaCard[]  @relation("catcha_recipient_cards")
	recipientKits      NurseryKit[]  @relation("trade_recipient_kits")
	recipientSideSent  Boolean       @map("recipient_side_sent")
	recipientAccepted  Boolean       @map("recipient_accepted")

	@@map("catcha_trades")
	@@index(fields: [senderUserUuid, recipientUserUuid])
}

model ArtistProfile {
	name         String   @id @unique
	displayName  String?  @map("display_name")

	discordId  String?  @map("discord_id")

	description  String?

	@@index([discordId])
	@@map("artist_profiles")
}

model HistoryCat {
	uuid      String  @id @unique @default(uuid())
	userUuid  String  @map("user_uuid")

	namePrefix  String  @map("name_prefix")
	nameSuffix  String  @map("name_suffix")

	age         Float
	ageUpdated  DateTime  @map("age_updated")

	gender  String?

	pelt  String?
	eyes  String?

	clan  String
	rank  String

	isDead        Boolean  @map("is_dead")
	diedAtMoons   Float?   @map("died_at_moons")
	causeOfDeath  String?  @map("cause_of_death")

	dateStored  DateTime  @map("date_stored")
	ageStored   Float     @map("age_stored")

	biologicalNurseryUuid  String?  @map("biological_nursery_uuid")

	user  User  @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

	@@index([userUuid])
	@@map("history_cats")
}

model Nursery {
	uuid  String  @unique @id @default(uuid())

	difficulty  String
	isPaused    Boolean  @map("is_paused")

	food           Float
	foodUpdated    DateTime  @map("food_updated")

	alerts  String  // Alerts are stored as JSON

	lastBredAt     DateTime?  @map("last_bred_at")
	lastAdoptedAt  DateTime?  @map("last_adopted_at")
	lastCooledAt   DateTime?  @map("last_cooled_at")

	statsAbandoned  Int  @map("stats_abandoned")  @default(0)
	statsAdopted    Int  @map("stats_adopted")    @default(0)
	statsEntrusted  Int  @map("stats_entrusted")  @default(0)
	statsKilled     Int  @map("stats_killed")     @default(0)
	statsRaised     Int  @map("stats_raised")     @default(0)

	kits            NurseryKit[]  @relation("nursery")
	biologicalKits  NurseryKit[]  @relation("biological_nursery")

	user  User  @relation(fields: [uuid], references: [uuid], onDelete: Cascade)

	@@map("nurseries")
}

model NurseryKit {
	uuid         String  @unique @id @default(uuid())
	nurseryUuid  String  @map("nursery_uuid")

	namePrefix  String    @map("name_prefix")
	gender      String?

	ageMoons    Float     @map("age_moons")
	ageUpdated  DateTime  @map("age_updated")

	bredAt     DateTime  @map("bred_at")
	bredBy     String?   @map("bred_by")
	adoptedAt  DateTime?  @map("adopted_at")

	pelt  String
	eyes  String

	health              Float
	healthUpdated       DateTime  @map("health_updated")
	hunger              Float
	hungerUpdated       DateTime  @map("hunger_updated")
	bond                Float
	bondUpdated         DateTime  @map("bond_updated")
	temperature         Float // In Celsius
	temperatureUpdated  DateTime  @map("temperature_updated")

	events  String // Stored as JSON

	sickSince       DateTime?  @map("sick_since")
	wanderingSince  DateTime?  @map("wandering_since")

	nursery            Nursery   @relation("nursery", fields: [nurseryUuid], references: [uuid], onDelete: Cascade)
	biologicalNursery  Nursery?  @relation("biological_nursery", fields: [bredBy], references: [uuid], onDelete: SetNull)

	pendingTradeUuid1  String?       @map("pending_trade_uuid_1")
	pendingTradeSide1  CatchaTrade?  @relation("trade_sender_kits", fields: [pendingTradeUuid1], references: [tradeUuid], onDelete: SetNull)

	pendingTradeUuid2  String?       @map("pending_trade_uuid_2")
	pendingTradeSide2  CatchaTrade?  @relation("trade_recipient_kits", fields: [pendingTradeUuid2], references: [tradeUuid], onDelete: SetNull)

	@@index([nurseryUuid])
	@@map("nursery_kits")
}

